// ######
// ## TreeMainWindow.cpp
// ## ==================
// ## 07.04.2013: Creation
// ## 02.06.2019: Version v2
// ## 09.07.2022: Prise en compte QT57
// ######

#include "TreeMainWindow.h"
#include "TreeWidget.h"

#include "FileOpen.xpm"
#include "FileSave.xpm"

//
// <<<< TreeMainWindow::TreeMainWindow
//
TreeMainWindow::TreeMainWindow(QWidget *p_Parent)
    : QMainWindow(p_Parent)
{

  //-- MENU

  _Menu = new QMenu(this);
  _Menu->setTitle("&Fichier");

  this->menuBar()->addMenu(_Menu);

  _Menu->addAction(QPixmap((const char **)FileOpen), "Choisir Dossier racine", this, SLOT(slot_Choisir_Dossier_Racine()), Qt::ALT | Qt::Key_S);

  _Menu->addSeparator();

  _Menu->addAction("Quitter", this, SLOT(slot_QUIT()), Qt::ALT | Qt::Key_Q);

  //-- Options

  _OptionsMenu = new QMenu(this);
  _OptionsMenu->setTitle("&Options");
  this->menuBar()->addMenu(_OptionsMenu);

  //-- Aide

  _HelpMenu = new QMenu(this);
  _HelpMenu->setTitle("&Aide");
  this->menuBar()->addMenu(_HelpMenu);

  //-- SPLITTER

  _Splitter = new QSplitter(this);

  this->setCentralWidget(_Splitter);

  //-- TREEWIDGET Source et Destination

  _TW_Dossier = new TreeWidget(_Splitter);
  _TextEdit = new TextEdit(_Splitter);
  _TextEdit->setReadOnly(true);

  //Animation du texte
  timer = new QTimer(this);
  connect(timer, &QTimer::timeout, this, &TreeMainWindow::updateText);
  StartTextAnimation("Bonjour, bienvenue dans notre application de gestion de fichiers !");

#ifdef WIN32
  QByteArray BA_HOME(getenv("HOMEDRIVE"));
  BA_HOME.append(getenv("HOMEPATH"));
#else
  QByteArray BA_HOME(getenv("HOME")); // par défaut getenv("HOME") est défini
#endif

  QString DefautDIR("C:\\Users\\dsc12\\Desktop\\Prog cours\\L3\\Système exploitation");

  Choisir_Dossier_Racine(DefautDIR);

  //-- SLOTS
  connect(_TW_Dossier, SIGNAL(SIGNAL_Statut_Fichier(QString)), this, SLOT(slot_Statut_Fichier(QString)));

  connect(_TW_Dossier, SIGNAL(SIGNAL_RightClicked(QTreeWidgetItem *, int)), this, SLOT(slot_PopupContextMenu_TreeView(QTreeWidgetItem *, int)));
  connect(_TW_Dossier, SIGNAL(itemClicked(QTreeWidgetItem *, int)), this, SLOT(handleItemClicked(QTreeWidgetItem *)));
}
// >>>> TreeMainWindow::TreeMainWindow

//
// <<<< TreeMainWindow::Choisir_Dossier_Racine
//
void TreeMainWindow::Choisir_Dossier_Racine(QString p_Dossier)
{
  QFileInfo FI_Racine(p_Dossier);

  if (FI_Racine.isSymLink())
  {
    _Path_Dossier_Racine = FI_Racine.symLinkTarget();
  }
  else
  {
    _Path_Dossier_Racine = p_Dossier;
  }

  _TW_Dossier->Add_FirstChild(_Path_Dossier_Racine);
}
// >>>> TreeMainWindow::Choisir_Dossier_Racine

//
// <<<< TreeMainWindow::Statut_Fichier
//
void TreeMainWindow::Statut_Fichier(QString p_Path)
{
  QString SPath = p_Path;
  QFileInfo qFI(SPath);

  QDate mDate = qFI.lastModified().date();
  QTime mTime = qFI.lastModified().time();

  QString qDate = mDate.toString("dd.MM.yyyy");
  QString qTime = mTime.toString("hh.mm.ss");

  QString qS_Modif = QString("  -  Modifié le  %1  %2").arg(qDate).arg(qTime);

  this->statusBar()->showMessage(SPath + qS_Modif);
  handleItemClicked(_TW_Dossier->currentItem());
}
// >>>> TreeMainWindow::Statut_Fichier

//
// <<<< TreeMainWindow::slot_Choisir_Dossier_Racine
//
void TreeMainWindow::slot_Choisir_Dossier_Racine()
{
  QFileDialog F_Dialog(this);

#ifdef QT57
  F_Dialog.setFileMode(QFileDialog::DirectoryOnly);
#else
  F_Dialog.setFileMode(QFileDialog::Directory);
  F_Dialog.setOptions(QFileDialog::ShowDirsOnly);
#endif

  F_Dialog.setAcceptMode(QFileDialog::AcceptOpen);
  F_Dialog.setSizeGripEnabled(true);

#ifdef WIN32
  QByteArray BA_HOME(getenv("HOMEDRIVE"));
  BA_HOME.append(getenv("HOMEPATH"));
#else
  QByteArray BA_HOME(getenv("HOME"));
#endif

  QString DefautDIR(BA_HOME);

  F_Dialog.setDirectory(DefautDIR);

  QString qDIR = F_Dialog.getExistingDirectory(this, "Sélection Dossier Source");

  if (!qDIR.isEmpty())
  {
    Choisir_Dossier_Racine(qDIR);
  }
}
// >>>> TreeMainWindow::slot_Choisir_Dossier_Racine

//
// <<<< TreeMainWindow::slot_Statut_Fichier
//
void TreeMainWindow::slot_Statut_Fichier(QString p_Path)
{
  this->Statut_Fichier(p_Path);
}
// >>>> TreeMainWindow::slot_Statut_Fichier

//
// <<<< TreeMainWindow::slot_PopupContextMenu_TreeView
//
void TreeMainWindow::slot_PopupContextMenu_TreeView(QTreeWidgetItem *p_Item, int)
{
  QMenu PopupM("PopupMenu TreeView");

  if (!p_Item)
  {
    return;
  }

  QString PathName = _TW_Dossier->Get_PathName(p_Item);

  QFileInfo FI_Path(PathName);

  FI_Path.setCaching(false);

  while (FI_Path.isSymLink())
  {
    PathName = FI_Path.symLinkTarget();
    FI_Path.setFile(PathName);
  }

  if (PathName.isEmpty())
    return;

  QAction *X_Action_DIR = NULL;
  QAction *X_Action_TXT = NULL;

  if (FI_Path.isDir())
  {

    X_Action_DIR = PopupM.addAction(QString("Ouvrir ce dossier"));
  }
  else if (FI_Path.isFile())
  {

    QString SFX = QString(".%1;").arg(FI_Path.suffix());

    if (QString(".cpp;.h;.xpm;.pro;.json;.c;.stash;").contains(SFX.toLower()))
    {
      X_Action_TXT = PopupM.addAction(QString("Afficher le fichier"));
    }
  }
  else
  {
    return;
  }

  QPoint PM_Point = QCursor::pos() + QPoint(12, 8);

  QAction *ACT_x = PopupM.exec(PM_Point);

  if (ACT_x == NULL)
  {
    return;
  }

  if (ACT_x == X_Action_DIR)
  {
    this->Choisir_Dossier_Racine(PathName);
  }

  if (ACT_x == X_Action_TXT)
  {
    QFile Fd_R(PathName);

    if (Fd_R.open(QIODevice::ReadOnly))
    {
      QTextStream TS_R(&Fd_R);
      // TS_R.setCodec( QTextCodec::codecForName( "UTF-8" );
      QString S_TEXT = TS_R.readAll();
      Fd_R.close();

      _TextEdit->setReadOnly(false);
      _TextEdit->setText(S_TEXT);
      _TextEdit->setReadOnly(true);
    }
  }
}
// >>>> TreeMainWindow::slot_PopupContextMenu_TreeView

void TreeMainWindow::handleItemClicked(QTreeWidgetItem * p_Item) {
  if (p_Item == NULL) {
    return;
  }

  QString PathName = _TW_Dossier->Get_PathName(p_Item);

  QFileInfo FI_Path(PathName);

  FI_Path.setCaching(false);

  while (FI_Path.isSymLink()) {
    PathName = FI_Path.symLinkTarget();
    FI_Path.setFile(PathName);
  }

  if (PathName.isEmpty()) {
    return;
  }

  if (FI_Path.isFile()) {
    if(QString(".cpp;.h;.xpm;.pro;").contains(QString(".%1;").arg(FI_Path.suffix()).toLower())) {
      QFile Fd_R(PathName);

      if (Fd_R.open(QIODevice::ReadOnly)) {
        QTextStream TS_R(&Fd_R);
        // TS_R.setCodec( QTextCodec::codecForName( "UTF-8" );
        QString S_TEXT = TS_R.readAll();
        Fd_R.close();

        _TextEdit->setReadOnly(false);
        this->StartTextAnimation(S_TEXT);
        _TextEdit->setReadOnly(true);
      }
    }
  }
}


void TreeMainWindow::StartTextAnimation(QString text) {
  _TextEdit->show();
  currentIndex = 0;
  currentText = text;
  timer->start(50);
}

void TreeMainWindow::updateText()
{
  if (currentIndex >= currentText.size())
    {
        timer->stop(); // Stop the animation when all the text is displayed
        return;
    }

    QString displayText = currentText.left(currentIndex + 1); // Get the text to display up to the current index
    _TextEdit->setPlainText(displayText); // Update the displayed text
    currentIndex++;
}

// <<<< TreeMainWindow::slot_QUIT
//
void TreeMainWindow::slot_QUIT()
{
  //--  ? Enregistrer_Arborescence( QString p_PathFichier )

  qApp->quit();
}
// >>>> TreeMainWindow::slot_QUIT
